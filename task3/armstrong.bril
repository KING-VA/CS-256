@main(input: int) {
  zero.0: int = const 0;
  ten.0: int = const 10;
  sum.0: int = const 0;
  : int = id digits.0;
  : int = id zero.0;
  : int = id sum.0;
  : int = id tmp.0;
  : int = id ten.0;
  digits.0: int = call @getDigits input;
.loop:
  b: bool = gt tmp zero;
  br b .body .done;
.body:
  digit: int = call @mod tmp ten;
  pow: int = call @power digit digits;
  sum: int = add sum pow;
  tmp: int = div tmp ten;
  jmp .loop;
.done:
  res: bool = eq input sum;
  tmp.0: int = id input;
  print res;
}
@getDigits(n: int): int {
  ten.0: int = const 10;
  zero.0: int = const 0;
  one.0: int = const 1;
  div.0: int = div n ten.0;
  cond.0: bool = eq div.0 zero.0;
  br cond.0 .then .else;
.then:
  ret one.0;
.else:
  rec.0: int = call @getDigits div.0;
  res.0: int = add rec.0 one.0;
  ret res.0;
}
@mod(a: int, b: int): int {
  q: int = div a b;
  aq: int = mul b q;
  mod: int = sub a aq;
  ret mod;
}
@power(base: int, exp: int): int {
  ten.0: int = const 10;
  zero.0: int = const 0;
  one.0: int = const 1;
  : int = id zero.0;
  : int = id res.0;
  : int = id ten.0;
  : int = id one.0;
  res.0: int = const 1;
.loop:
  b: bool = eq exp zero;
  br b .done .body;
.body:
  res: int = mul res base;
  exp: int = sub exp one;
  jmp .loop;
.done:
  ret res;
}
